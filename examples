# print("   /")
# print("  /")
# print(" /")
# print("/")

# my_first_variable = "lowercase and with _ between words"

# character_name = "John"
# character_age = "35"
#
# print("There once was a man named " + character_name + ", ")
# print("he was " + character_age + ". ")
# print("He really liked the name " + character_name + ", ")
# print("but didn't like being " + character_age + ". ")

# from math import *
# my_num = -5
# print(sqrt(36))

# GET INPUT FROM USER
# name = input("Enter your name: ")
# age = input("Enter your age: ")
# print("Hello " + name + "! You are " + age + " .")

# BASIC CALCULATOR
# default is to concatenate string
# num1 = input("Enter a number: ")
# num2 = input("Enter another number: ")
# result1 = int(num1) + int(num2)
# basic problem with this as a calculator is decimals int looks for whole numbner
# print(result1)
# result2 = float(num1) + float(num2)
# if you want user to enter any number they want
# print(result2)

# MADLIBS BASIC - homework
# basic input and print the response
# color = input("Enter a color: ")
# plural_noun = input("Enter a pluralnoun: ")
# celebrity = input("Enter a celebrity: ")
#
# print("Roses are " + color)
# print(plural_noun + " are blue")
# print("I love " + celebrity)

# LISTS IN PYTHON
# when dealing with large amt of data
# store lists of information and organize and keep track

# friends = ["Cats", "Jennifer", "Jennifer","Zack", "PingPong"]
# lucky_numbers = [4, 6, 1, 2, 8, 30, 234234]
# # use negative to access from back of the list - first element at back of the list is -1
# # use index# 1: to get items from position 1 to the end
# # use index# 1:3 to get items from position 1 until before 3 - range
# # append a list using the extend function
# friends.extend(lucky_numbers)
# friends.append("Creed")
# friends.remove("Cats")
# friends.clear()
# # clear will empty the list
# friends.pop()
# # remove the last element of a list
# friends.index("Cats")
# # will tell me if Cats is in the list and at what index
# # if put something not in the list will throw an error
# friends.count("Jennifer")
# # will tell me how many Jennifers in the list
# friends.sort()
# # will sort in ascending order - alphabetical order/numerical/etc
# friends.reverse()
# friends2 = friends.copy()

# TUPLES
# tuples are immutable - can't be changed or modified
# difference btw list and tuple = use tuple for data that won't change
# coordinates = (4, 5)
# print(coordinates[0])

# FUNCTIONS
# function is a collection of code that performs a specific task
# help to organize the code
# when I want to do something I can call the code - core concept in Python
# def - keywork that tells Python that wanting to use a function
# def say_hi(name, age):
#     print("Hello " + name + ", you are " + age + ".")
#
# print("Top")
# say_hi("Mike", "46")
# say_hi("Jennifer", "43")
# print("Bottom")

# RETURN STATEMENT
# actually want information back from the function
# execute the code and give me info back - value, how the task went, etc
# return statement tells Python that you want to get an answer back
# parameter - give info to a function & return - get info from a function
# can't put anything after a return - breaks us out of the function
# def cube(num):
#     return num * num * num
#
# result = cube(4)
# print(result)

# IF STATEMENTS
# help program to make decision
# ex = execute when a condition is true
# is_male = False
# is_tall = False
#
# if is_male or is_tall:
#     print("You are a male or tall or both")
# elif is_male and not(is_tall):
#     print("You are a male and not tall")
# elif not(is_male) and is_tall:
#     print("You are not a male, but are tall")
# else:
#     print("You are neither male nor tall")

# comparison operator
#  >=, ==, !=
# can compare number, string, booleans, etc
# def max_num(num1, num2, num3):
#     if num1 >= num2 and num1 >= num3:
#         return num1
#     elif num2 >= num1 and num2 >= num3:
#         return num2
#     else:
#         return num3
#
# print(max_num(5,-5,934))


# A BETTER CALCULATOR
# num1 = float(input("Enter a first number: "))
# op = input("Enter operator: ")
# num2 = float(input("Enter a second number: "))
#
# if op == "+":
#     print(num1 + num2)
# elif op == "-":
#     print(num1 - num2)
# elif op == "/":
#     print(num1 / num2)
# elif op == "*":
#     print(num1 * num2)
# else:
#     print("Invalid operator")

# DICTIONARY -- KEY VALUE PAIRS
# ex in a real dictionary = key is work and value is definition
# monthConversions = {
#     "Jan": "January",
#     "Feb": "February",
#     "Mar": "March"
# }
#
# print(monthConversions["Mar"])
# # with get cna specify a default value
# # where there is a key taht doesn't map to a value, you can give a default value
# print(monthConversions.get("Yay", "Not a valid Key"))

# WHILE LOOP
# execute a block of code multipe times until a condition is false
# i = 1
# while i <= 10:
#      print(i)
#      i += 1
#
# print ("Done with loop")

# secret_word = "fun"
# guess = ""
# # specify a looping condition or looping guard
# while guess != secret_word:
#     guess = input("enter guess: ")
#
# print("You win!")

# adding to this guessing game
# secret_word = "fun"
# guess = ""
# guess_count = 0
# guess_limit = 3
# out_of_guesses = False
# # specify a looping condition or looping guard
# while guess != secret_word and not(out_of_guesses):
#     if guess_count < guess_limit:
#         guess = input("enter guess: ")
#         guess_count += 1
#     else:
#         out_of_guesses = True
#
# if out_of_guesses:
#     print("Out of guesses. You LOSE!")
# else:
#     print("You win!")


# FOR LOOP

# for letter in "Jennifer":
#     print(letter)

# friends = ["Jennifer", "Zack", "pingpong", "napoleon"]
# for index in friends:
#     print(index)

# for index in range(3, 10):
#     print(index)

# friends = ["Jennifer", "Zack", "pingpong", "napoleon"]
# for index in range(len(friends)):
#     print(friends[index])

# for index in range(5):
#     if index == 0:
#         print("first iteration")
#     else:
#         print("Not first")

# EXPONENT FUNCTION


# 2D LISTS & NESTED LOOPS
# number_grid = [
#     [1, 2, 3],
#     [4, 5, 6],
#     [7, 8, 9],
#     [0]
# ]
#
# # print(number_grid[0][0])
# for row in number_grid:
#     # print(row)
#     for col in row:
#         print(col)

# BASIC TRANSLATOR
# def translate(phrase):
#     translation = ""
#     for letter in phrase:
#         # if letter in "AEIOUaeiou":
#         if letter.lower() in "aeiou":
#             if letter.isupper():
#                 translation = translation = "G"
#             else:
#                 translation = translation + "g"
#         else:
#             translation = translation + letter
#     return translation
#
# print(translate(input("Enter a phrase: ")))

# TRY EXCEPT - catching errors in Python
# try:
#     value = 10/0
#     number = int(input("Enter a number: "))
#     print(number)
# except ZeroDivisionError as err:
#     print(err)
# except ValueError:
#     print("Invalid Input")

# READ FROM EXTERNAL FILE
# r, r+, - read, read/write
# a = append
# w = create new file
# can create any type file you want -- HTML, etc.
# whenever you open a file you want to make sure tha you close the file, too
# household_file = open("household.txt", "r")
#
# # print(household_file.readable())
# # print(household_file.readline())
# # print(household_file.readlines())
# # print(household_file.readlines()[1])
# # for member in household_file.readlines():
# #     print(member)
#
# # household_file.close()
#
#
# # WRITING & APPENDING TO FILES
# household_file = open("household.txt", "a")
# household_file.write("\nStranger - Crazy")
# household_file.close()


# MODULEScmd
# import useful_tools
# print(useful_tools.roll_dice(4856))

# PIP - installing 3rd party module
# pip install python-docx or uninstall python-docx
# located in ExternalLibraries>Lib>site-packages

# CLASS
# you can define your own data type
# from Student import Student
#
# student1 = Student("Jennifer", "stuff", "4.0", False)
# student2 = Student("Zack", "other stuff", "4.0", True)
# print(student1.name)

# MULTIPLE CHOICE QUIZ
# how to use a class to model a real world thing
# from Question import Question
# question_prompts = [
#     "What color is the sky? \n(a)Blue\n(b) Purple\n(c) Pink\n\n",
#     "What color is a stop sign? \n(a)Green\n(b) Orange\n(c) Red\n\n",
#     "What color is an Orange? \n(a)Red\n(b) Orange\n(c) Hot Pink\n\n",
# ]
#
# questions = [
#     Question(question_prompts[0], "a"),
#     Question(question_prompts[1], "c"),
#     Question(question_prompts[2], "b")
# ]
#
# def run_test(questions):
#     score = 0
#     for question in questions:
#         answer = input(question.prompt)
#         if answer == question.answer:
#             score += 1
#         print("You got " + str(score) + "/" + str(len(questions)) + " correct.")
#
# run_test(questions)


# CLASS FUNCTIONS
# from Student import Student
#
# student1 = Student("Jennifer", "stuff", "3.9"),
# student2 = Student("Zack", "other stuff", "2.0")


# INHERITANCE
# from Chef import Chef
# from ChineseChef import ChineseChef
# 
# myChef = Chef()
# myChef.make_special_dish()
# 
# myChineseChef = ChineseChef()
# myChineseChef.make_special_dish()
